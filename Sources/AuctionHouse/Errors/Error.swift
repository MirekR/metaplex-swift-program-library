/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita-swift
 */
import Foundation

public enum auction_houseError: String, Error {
    /**
 * PublicKeyMismatch: '0x1770'
 *
 * @category Errors
 * @category generated
 */
    case publicKeyMismatchError = "0x1770"
    /**
 * InvalidMintAuthority: '0x1771'
 *
 * @category Errors
 * @category generated
 */
    case invalidMintAuthorityError = "0x1771"
    /**
 * UninitializedAccount: '0x1772'
 *
 * @category Errors
 * @category generated
 */
    case uninitializedAccountError = "0x1772"
    /**
 * IncorrectOwner: '0x1773'
 *
 * @category Errors
 * @category generated
 */
    case incorrectOwnerError = "0x1773"
    /**
 * PublicKeysShouldBeUnique: '0x1774'
 *
 * @category Errors
 * @category generated
 */
    case publicKeysShouldBeUniqueError = "0x1774"
    /**
 * StatementFalse: '0x1775'
 *
 * @category Errors
 * @category generated
 */
    case statementFalseError = "0x1775"
    /**
 * NotRentExempt: '0x1776'
 *
 * @category Errors
 * @category generated
 */
    case notRentExemptError = "0x1776"
    /**
 * NumericalOverflow: '0x1777'
 *
 * @category Errors
 * @category generated
 */
    case numericalOverflowError = "0x1777"
    /**
 * ExpectedSolAccount: '0x1778'
 *
 * @category Errors
 * @category generated
 */
    case expectedSolAccountError = "0x1778"
    /**
 * CannotExchangeSOLForSol: '0x1779'
 *
 * @category Errors
 * @category generated
 */
    case cannotExchangeSOLForSolError = "0x1779"
    /**
 * SOLWalletMustSign: '0x177a'
 *
 * @category Errors
 * @category generated
 */
    case sOLWalletMustSignError = "0x177a"
    /**
 * CannotTakeThisActionWithoutAuctionHouseSignOff: '0x177b'
 *
 * @category Errors
 * @category generated
 */
    case cannotTakeThisActionWithoutAuctionHouseSignOffError = "0x177b"
    /**
 * NoPayerPresent: '0x177c'
 *
 * @category Errors
 * @category generated
 */
    case noPayerPresentError = "0x177c"
    /**
 * DerivedKeyInvalid: '0x177d'
 *
 * @category Errors
 * @category generated
 */
    case derivedKeyInvalidError = "0x177d"
    /**
 * MetadataDoesntExist: '0x177e'
 *
 * @category Errors
 * @category generated
 */
    case metadataDoesntExistError = "0x177e"
    /**
 * InvalidTokenAmount: '0x177f'
 *
 * @category Errors
 * @category generated
 */
    case invalidTokenAmountError = "0x177f"
    /**
 * BothPartiesNeedToAgreeToSale: '0x1780'
 *
 * @category Errors
 * @category generated
 */
    case bothPartiesNeedToAgreeToSaleError = "0x1780"
    /**
 * CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoff: '0x1781'
 *
 * @category Errors
 * @category generated
 */
    case cannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoffError = "0x1781"
    /**
 * SaleRequiresSigner: '0x1782'
 *
 * @category Errors
 * @category generated
 */
    case saleRequiresSignerError = "0x1782"
    /**
 * OldSellerNotInitialized: '0x1783'
 *
 * @category Errors
 * @category generated
 */
    case oldSellerNotInitializedError = "0x1783"
    /**
 * SellerATACannotHaveDelegate: '0x1784'
 *
 * @category Errors
 * @category generated
 */
    case sellerATACannotHaveDelegateError = "0x1784"
    /**
 * BuyerATACannotHaveDelegate: '0x1785'
 *
 * @category Errors
 * @category generated
 */
    case buyerATACannotHaveDelegateError = "0x1785"
    /**
 * NoValidSignerPresent: '0x1786'
 *
 * @category Errors
 * @category generated
 */
    case noValidSignerPresentError = "0x1786"
    /**
 * InvalidBasisPoints: '0x1787'
 *
 * @category Errors
 * @category generated
 */
    case invalidBasisPointsError = "0x1787"
    /**
 * TradeStateDoesntExist: '0x1788'
 *
 * @category Errors
 * @category generated
 */
    case tradeStateDoesntExistError = "0x1788"
    /**
 * TradeStateIsNotEmpty: '0x1789'
 *
 * @category Errors
 * @category generated
 */
    case tradeStateIsNotEmptyError = "0x1789"
    /**
 * ReceiptIsEmpty: '0x178a'
 *
 * @category Errors
 * @category generated
 */
    case receiptIsEmptyError = "0x178a"
    /**
 * InstructionMismatch: '0x178b'
 *
 * @category Errors
 * @category generated
 */
    case instructionMismatchError = "0x178b"
    /**
 * EscrowUnderRentExemption: '0x178c'
 *
 * @category Errors
 * @category generated
 */
    case escrowUnderRentExemptionError = "0x178c"

    public var code: String? { self.rawValue }
}

extension auction_houseError: LocalizedError {
    public var errorDescription: String? {
        switch self {
            /**
 * PublicKeyMismatch: 'PublicKeyMismatch'
 *
 * @category Errors
 * @category generated
 */
    case .publicKeyMismatchError: return "PublicKeyMismatch"
    /**
 * InvalidMintAuthority: 'InvalidMintAuthority'
 *
 * @category Errors
 * @category generated
 */
    case .invalidMintAuthorityError: return "InvalidMintAuthority"
    /**
 * UninitializedAccount: 'UninitializedAccount'
 *
 * @category Errors
 * @category generated
 */
    case .uninitializedAccountError: return "UninitializedAccount"
    /**
 * IncorrectOwner: 'IncorrectOwner'
 *
 * @category Errors
 * @category generated
 */
    case .incorrectOwnerError: return "IncorrectOwner"
    /**
 * PublicKeysShouldBeUnique: 'PublicKeysShouldBeUnique'
 *
 * @category Errors
 * @category generated
 */
    case .publicKeysShouldBeUniqueError: return "PublicKeysShouldBeUnique"
    /**
 * StatementFalse: 'StatementFalse'
 *
 * @category Errors
 * @category generated
 */
    case .statementFalseError: return "StatementFalse"
    /**
 * NotRentExempt: 'NotRentExempt'
 *
 * @category Errors
 * @category generated
 */
    case .notRentExemptError: return "NotRentExempt"
    /**
 * NumericalOverflow: 'NumericalOverflow'
 *
 * @category Errors
 * @category generated
 */
    case .numericalOverflowError: return "NumericalOverflow"
    /**
 * ExpectedSolAccount: 'Expected a sol account but got an spl token account instead'
 *
 * @category Errors
 * @category generated
 */
    case .expectedSolAccountError: return "Expected a sol account but got an spl token account instead"
    /**
 * CannotExchangeSOLForSol: 'Cannot exchange sol for sol'
 *
 * @category Errors
 * @category generated
 */
    case .cannotExchangeSOLForSolError: return "Cannot exchange sol for sol"
    /**
 * SOLWalletMustSign: 'If paying with sol, sol wallet must be signer'
 *
 * @category Errors
 * @category generated
 */
    case .sOLWalletMustSignError: return "If paying with sol, sol wallet must be signer"
    /**
 * CannotTakeThisActionWithoutAuctionHouseSignOff: 'Cannot take this action without auction house signing too'
 *
 * @category Errors
 * @category generated
 */
    case .cannotTakeThisActionWithoutAuctionHouseSignOffError: return "Cannot take this action without auction house signing too"
    /**
 * NoPayerPresent: 'No payer present on this txn'
 *
 * @category Errors
 * @category generated
 */
    case .noPayerPresentError: return "No payer present on this txn"
    /**
 * DerivedKeyInvalid: 'Derived key invalid'
 *
 * @category Errors
 * @category generated
 */
    case .derivedKeyInvalidError: return "Derived key invalid"
    /**
 * MetadataDoesntExist: 'Metadata doesn't exist'
 *
 * @category Errors
 * @category generated
 */
    case .metadataDoesntExistError: return "Metadata doesn't exist"
    /**
 * InvalidTokenAmount: 'Invalid token amount'
 *
 * @category Errors
 * @category generated
 */
    case .invalidTokenAmountError: return "Invalid token amount"
    /**
 * BothPartiesNeedToAgreeToSale: 'Both parties need to agree to this sale'
 *
 * @category Errors
 * @category generated
 */
    case .bothPartiesNeedToAgreeToSaleError: return "Both parties need to agree to this sale"
    /**
 * CannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoff: 'Cannot match free sales unless the auction house or seller signs off'
 *
 * @category Errors
 * @category generated
 */
    case .cannotMatchFreeSalesWithoutAuctionHouseOrSellerSignoffError: return "Cannot match free sales unless the auction house or seller signs off"
    /**
 * SaleRequiresSigner: 'This sale requires a signer'
 *
 * @category Errors
 * @category generated
 */
    case .saleRequiresSignerError: return "This sale requires a signer"
    /**
 * OldSellerNotInitialized: 'Old seller not initialized'
 *
 * @category Errors
 * @category generated
 */
    case .oldSellerNotInitializedError: return "Old seller not initialized"
    /**
 * SellerATACannotHaveDelegate: 'Seller ata cannot have a delegate set'
 *
 * @category Errors
 * @category generated
 */
    case .sellerATACannotHaveDelegateError: return "Seller ata cannot have a delegate set"
    /**
 * BuyerATACannotHaveDelegate: 'Buyer ata cannot have a delegate set'
 *
 * @category Errors
 * @category generated
 */
    case .buyerATACannotHaveDelegateError: return "Buyer ata cannot have a delegate set"
    /**
 * NoValidSignerPresent: 'No valid signer present'
 *
 * @category Errors
 * @category generated
 */
    case .noValidSignerPresentError: return "No valid signer present"
    /**
 * InvalidBasisPoints: 'BP must be less than or equal to 10000'
 *
 * @category Errors
 * @category generated
 */
    case .invalidBasisPointsError: return "BP must be less than or equal to 10000"
    /**
 * TradeStateDoesntExist: 'The trade state account does not exist'
 *
 * @category Errors
 * @category generated
 */
    case .tradeStateDoesntExistError: return "The trade state account does not exist"
    /**
 * TradeStateIsNotEmpty: 'The trade state is not empty'
 *
 * @category Errors
 * @category generated
 */
    case .tradeStateIsNotEmptyError: return "The trade state is not empty"
    /**
 * ReceiptIsEmpty: 'The receipt is empty'
 *
 * @category Errors
 * @category generated
 */
    case .receiptIsEmptyError: return "The receipt is empty"
    /**
 * InstructionMismatch: 'The instruction does not match'
 *
 * @category Errors
 * @category generated
 */
    case .instructionMismatchError: return "The instruction does not match"
    /**
 * EscrowUnderRentExemption: 'The instruction would drain the escrow below rent exemption threshold'
 *
 * @category Errors
 * @category generated
 */
    case .escrowUnderRentExemptionError: return "The instruction would drain the escrow below rent exemption threshold"
        }
    }
}